{"ast":null,"code":"var _jsxFileName = \"/Users/angeraphaellouanne/Documents/Developpement/scraping & open data/search_engine/font-react/src/components/allResultsCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./allResultsCard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AllResultsCard = _ref => {\n  _s();\n\n  let {\n    results\n  } = _ref;\n  const [filteredResults] = useState(results);\n  console;\n\n  function formatURL(u) {\n    // Split a given url into its various parts\n    let urltext = u;\n    let url = new URL(urltext);\n    let domain = url.origin;\n    let pathname = url.pathname;\n    let paths = pathname.split('/');\n    paths = paths.filter(Boolean);\n    return [domain, paths];\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"results-content\",\n    children: results.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"\".concat(item.liens),\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\".concat(formatURL(item.liens)[0]), formatURL(item.liens)[1].map(path => /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \" \\u203A \".concat(path)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\".concat(item.asin)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"excerpt\",\n        children: \"\".concat(item.titre)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AllResultsCard, \"JrelelDm2V6/peZyFd1KZdMgCAM=\");\n\n_c = AllResultsCard;\nAllResultsCard.propTypes = {\n  results: PropTypes.array\n};\nexport default AllResultsCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllResultsCard\");","map":{"version":3,"sources":["/Users/angeraphaellouanne/Documents/Developpement/scraping & open data/search_engine/font-react/src/components/allResultsCard.js"],"names":["React","useState","PropTypes","AllResultsCard","results","filteredResults","console","formatURL","u","urltext","url","URL","domain","origin","pathname","paths","split","filter","Boolean","map","item","liens","path","asin","titre","propTypes","array"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,sBAAP;;;AAEA,MAAMC,cAAc,GAAG,QAAiB;AAAA;;AAAA,MAAhB;AAAEC,IAAAA;AAAF,GAAgB;AAGtC,QAAM,CAACC,eAAD,IAAoBJ,QAAQ,CAACG,OAAD,CAAlC;AAEAE,EAAAA,OAAO;;AAEP,WAASC,SAAT,CAAmBC,CAAnB,EAAsB;AACpB;AACA,QAAIC,OAAO,GAAGD,CAAd;AACA,QAAIE,GAAG,GAAG,IAAIC,GAAJ,CAAQF,OAAR,CAAV;AACA,QAAIG,MAAM,GAAGF,GAAG,CAACG,MAAjB;AACA,QAAIC,QAAQ,GAAGJ,GAAG,CAACI,QAAnB;AACA,QAAIC,KAAK,GAAGD,QAAQ,CAACE,KAAT,CAAe,GAAf,CAAZ;AACAD,IAAAA,KAAK,GAAGA,KAAK,CAACE,MAAN,CAAaC,OAAb,CAAR;AACA,WAAO,CAACN,MAAD,EAASG,KAAT,CAAP;AACD;;AAGD,sBACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA,cACGX,OAAO,CAACe,GAAR,CAAaC,IAAD,iBACX;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,8BACE;AAAG,QAAA,IAAI,YAAKA,IAAI,CAACC,KAAV,CAAP;AAAA,gCACE;AAAA,+BACMd,SAAS,CAACa,IAAI,CAACC,KAAN,CAAT,CAAsB,CAAtB,CADN,GAEGd,SAAS,CAACa,IAAI,CAACC,KAAN,CAAT,CAAsB,CAAtB,EAAyBF,GAAzB,CAA8BG,IAAD,iBAC5B;AAAA,wCAAaA,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA,kBADD,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAOE;AAAA,8BAAQF,IAAI,CAACG,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAUE;AAAG,QAAA,SAAS,EAAC,SAAb;AAAA,4BAA2BH,IAAI,CAACI,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CArCD;;GAAMrB,c;;KAAAA,c;AAuCNA,cAAc,CAACsB,SAAf,GAA2B;AACzBrB,EAAAA,OAAO,EAAEF,SAAS,CAACwB;AADM,CAA3B;AAIA,eAAevB,cAAf","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./allResultsCard.css\";\n\nconst AllResultsCard = ({ results }) => {\n\n\n  const [filteredResults] = useState(results);\n\n  console\n\n  function formatURL(u) {\n    // Split a given url into its various parts\n    let urltext = u;\n    let url = new URL(urltext);\n    let domain = url.origin\n    let pathname = url.pathname\n    let paths = pathname.split('/');\n    paths = paths.filter(Boolean);\n    return [domain, paths]\n  }\n  \n\n  return (\n    <div className=\"results-content\">\n      {results.map((item) => (\n        <div className=\"result-card\">\n          <a href={`${item.liens}`}>\n            <p> \n              {`${formatURL(item.liens)[0]}`}  \n              {formatURL(item.liens)[1].map((path) => (\n                <span>{` â€º ${path}`}</span>\n              ))  } \n            </p>\n            <h3>{`${item.asin}`}</h3>\n          </a>\n          <p className=\"excerpt\">{`${item.titre}`}</p>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nAllResultsCard.propTypes = {\n  results: PropTypes.array\n};\n\nexport default AllResultsCard;\n"]},"metadata":{},"sourceType":"module"}