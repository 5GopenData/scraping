{"ast":null,"code":"var _jsxFileName = \"/Users/angeraphaellouanne/Documents/Developpement/scraping & open data/search_engine/font-react/src/components/allResultsCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./allResultsCard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AllResultsCard = _ref => {\n  _s();\n\n  let {\n    results\n  } = _ref;\n  const [filteredResults] = useState(results);\n  console.log(results[0]);\n\n  function formatURL(u) {\n    // Split a given url into its various parts\n    let urltext = u;\n    let url = new URL(urltext);\n    let domain = url.origin;\n    let pathname = url.pathname;\n    let paths = pathname.split('/');\n    paths = paths.filter(Boolean);\n    return [domain, paths];\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"results-content\",\n    children: filteredResults.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"\".concat(item.liens),\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\".concat(item.titre)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"excerpt\",\n        children: \"\".concat(item.liens)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AllResultsCard, \"JrelelDm2V6/peZyFd1KZdMgCAM=\");\n\n_c = AllResultsCard;\nAllResultsCard.propTypes = {\n  results: PropTypes.array\n};\nexport default AllResultsCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllResultsCard\");","map":{"version":3,"sources":["/Users/angeraphaellouanne/Documents/Developpement/scraping & open data/search_engine/font-react/src/components/allResultsCard.js"],"names":["React","useState","PropTypes","AllResultsCard","results","filteredResults","console","log","formatURL","u","urltext","url","URL","domain","origin","pathname","paths","split","filter","Boolean","map","item","liens","titre","propTypes","array"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,sBAAP;;;AAEA,MAAMC,cAAc,GAAG,QAAiB;AAAA;;AAAA,MAAhB;AAAEC,IAAAA;AAAF,GAAgB;AAEtC,QAAM,CAACC,eAAD,IAAoBJ,QAAQ,CAACG,OAAD,CAAlC;AAEAE,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAO,CAAC,CAAD,CAAnB;;AAGA,WAASI,SAAT,CAAmBC,CAAnB,EAAsB;AACpB;AACA,QAAIC,OAAO,GAAGD,CAAd;AACA,QAAIE,GAAG,GAAG,IAAIC,GAAJ,CAAQF,OAAR,CAAV;AACA,QAAIG,MAAM,GAAGF,GAAG,CAACG,MAAjB;AACA,QAAIC,QAAQ,GAAGJ,GAAG,CAACI,QAAnB;AACA,QAAIC,KAAK,GAAGD,QAAQ,CAACE,KAAT,CAAe,GAAf,CAAZ;AACAD,IAAAA,KAAK,GAAGA,KAAK,CAACE,MAAN,CAAaC,OAAb,CAAR;AACA,WAAO,CAACN,MAAD,EAASG,KAAT,CAAP;AACD;;AAGD,sBAEE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA,cACGX,eAAe,CAACe,GAAhB,CAAqBC,IAAD,iBACnB;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,8BACE;AAAG,QAAA,IAAI,YAAKA,IAAI,CAACC,KAAV,CAAP;AAAA,+BAEE;AAAA,8BAAQD,IAAI,CAACE,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAG,QAAA,SAAS,EAAC,SAAb;AAAA,4BAA2BF,IAAI,CAACC,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UAFF;AAcD,CAjCD;;GAAMnB,c;;KAAAA,c;AAmCNA,cAAc,CAACqB,SAAf,GAA2B;AACzBpB,EAAAA,OAAO,EAAEF,SAAS,CAACuB;AADM,CAA3B;AAIA,eAAetB,cAAf","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./allResultsCard.css\";\n\nconst AllResultsCard = ({ results }) => {\n\n  const [filteredResults] = useState(results);\n\n  console.log(results[0]);\n\n\n  function formatURL(u) {\n    // Split a given url into its various parts\n    let urltext = u;\n    let url = new URL(urltext);\n    let domain = url.origin\n    let pathname = url.pathname\n    let paths = pathname.split('/');\n    paths = paths.filter(Boolean);\n    return [domain, paths]\n  }\n  \n\n  return (\n\n    <div className=\"results-content\">\n      {filteredResults.map((item) => (\n        <div className=\"result-card\">\n          <a href={`${item.liens}`}>\n\n            <h3>{`${item.titre}`}</h3>\n          </a>\n          <p className=\"excerpt\">{`${item.liens}`}</p>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nAllResultsCard.propTypes = {\n  results: PropTypes.array\n};\n\nexport default AllResultsCard;\n"]},"metadata":{},"sourceType":"module"}